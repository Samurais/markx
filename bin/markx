#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');

program
  .version('0.0.6')
  .option('-n, --nohl', 'Disable syntax highlighting')
  .option('-p, --preview <port>', 'Start a server to get a live preview', parseInt)
  .option('-h, --head <file>', 'Custom head file')
  .option('-f, --foot <file>', 'Custom foot file')
  .option('-t, --template <file>', 'Jade template file')
  .option('-m, --masher <file>', 'Masher config file')
  .usage('[file]')

program.on('--help', function() {
  console.log('  Examples:');  
  console.log('');  
  console.log('    # convert markdown and code blocks to html');
  console.log('    $ markx blog.md > blog.html');
  console.log('');  
  console.log('    # convert jade to html');
  console.log('    $ markx index.jade > index.html');
  console.log('');  
  console.log('    # convert markdown with jade template to html');
  console.log('    $ markx --template template.jade blog.md > blog.html');
  console.log('');
  console.log('    # live preview of your markdown file');
  console.log('    $ markx --preview 8001 blog.md');
  console.log('');
  console.log('    # live preview of your markdown file with a custom header/footer');
  console.log('    $ markx --preview 8001 --head head.html --foot foot.html blog.md');
});

program.parse(process.argv);

var files = program.args;


if (files.length == 1) {
  var file = files[0];
  if (file.match(/\.json$/)) {
    var options = JSON.parse(fs.readFileSync(file, 'utf8'));
    file = options.file;
    options.preview = program.preview;
  } else {
    var options = {
      nohl: program.nohl,
      preview: program.preview,
      head: program.head,
      foot: program.foot,
      template: program.template,
      masher: program.masher
    }
  }
  if (program.preview) {
    var preview = require('../lib/preview');
    preview(file, options);
  } else {
    var convert = require('../lib/convert');
    convert(file, options, function(out) {
      if (options.output) {
        fs.writeFile(options.output, out);
      } else {
        process.stdout.write(out);
      }
    });
  }
} else {
  process.stdout.write(program.helpInformation());
  program.emit('--help');
  process.exit(1);
}
