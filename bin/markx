#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var aug = require('aug');

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .option('-n, --nohl', 'Disable syntax highlighting')
  .option('-p, --preview <port>', 'Start a server to get a live preview', parseInt)
  .option('-h, --head <file>', 'Custom head file')
  .option('-f, --foot <file>', 'Custom foot file')
  .option('-t, --template <file>', 'Jade template file')
  .option('-m, --masher <file>', 'Masher config file')
  .option('-i, --input <file>', 'Input file')
  .usage('[file]')

program.on('--help', function() {
  console.log('  Examples:');  
  console.log('');  
  console.log('    # convert markdown and code blocks to html');
  console.log('    $ markx blog.md > blog.html');
  console.log('');  
  console.log('    # convert jade to html');
  console.log('    $ markx index.jade > index.html');
  console.log('');  
  console.log('    # convert markdown with jade template to html');
  console.log('    $ markx --template template.jade blog.md > blog.html');
  console.log('');
  console.log('    # live preview of your markdown file');
  console.log('    $ markx --preview 8001 blog.md');
  console.log('');
  console.log('    # live preview of your markdown file with a custom header/footer');
  console.log('    $ markx --preview 8001 --head head.html --foot foot.html blog.md');
});

program.parse(process.argv);

var files = program.args;

var defaults =  {
  template: '',
  head: '',
  foot: '',
  input: '',
  output: '',
  nohl: false,
  preview: '',
  data: {},
  masher: {
    assetPath: '',
    outputPath: '',
    groups: {
    },
    plugins: {
      pre: [
      ],
      post: [
      ]
    }
  }
};


if (files.length == 1) {
  var file = files[0];
  var options = aug({}, defaults);
  if (file.match(/\.json$/)) {
    var config = JSON.parse(fs.readFileSync(file, 'utf8'));
    aug('strict', options, config);
    file = options.input;
  } 
  aug('strict', options, program);
  if (options.preview) {
    var preview = require('../lib/preview');
    preview(file, options);
  } else {
    var convert = require('../lib/convert');
    convert(file, options, function(out) {
      if (options.output) {
        fs.writeFile(options.output, out);
      } else {
        process.stdout.write(out);
      }
    });
  }
} else {
  process.stdout.write(program.helpInformation());
  program.emit('--help');
  process.exit(1);
}
